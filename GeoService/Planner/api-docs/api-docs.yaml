openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: https://localhost:8443
  description: Generated server url
paths:
  /api/user/{id}:
    get:
      tags:
      - api-controller
      operationId: getUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
      - api-controller
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
      - api-controller
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/substation/{id}:
    get:
      tags:
      - api-controller
      operationId: getSubstation
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Substation'
    put:
      tags:
      - api-controller
      operationId: updateSubstation
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Substation'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Substation'
    delete:
      tags:
      - api-controller
      operationId: deleteSubstation
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Substation'
  /api/eolopark/{id}:
    get:
      tags:
      - api-controller
      operationId: getEolopark
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EoloPark'
    put:
      tags:
      - api-controller
      operationId: updateEolopark
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EoloPark'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EoloPark'
    delete:
      tags:
      - api-controller
      operationId: deleteEolopark
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EoloPark'
  /api/aerogenerator/{id}:
    get:
      tags:
      - api-controller
      operationId: getaerogenerator
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Aerogenerator'
    put:
      tags:
      - api-controller
      operationId: updateAerogenerator
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Aerogenerator'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Aerogenerator'
    delete:
      tags:
      - api-controller
      operationId: deleteaerogenerator
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Aerogenerator'
  /api/{id}/user:
    get:
      tags:
      - api-controller
      operationId: getUsers
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageUser'
    post:
      tags:
      - api-controller
      operationId: createUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/{id}/aerogenerator:
    post:
      tags:
      - api-controller
      operationId: createAerogenerator
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Aerogenerator'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Aerogenerator'
  /api/substation:
    get:
      tags:
      - api-controller
      operationId: getSubstationes
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageSubstation'
    post:
      tags:
      - api-controller
      operationId: createSubstation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Substation'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Substation'
  /api/eolopark:
    get:
      tags:
      - api-controller
      operationId: getEoloparks
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEoloPark'
    post:
      tags:
      - api-controller
      operationId: createEolopark
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EoloPark'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EoloPark'
  /api/eolopark/automatic:
    post:
      tags:
      - api-controller
      operationId: createEolopark_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomaticPark'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EoloPark'
  /api/aerogenerator:
    get:
      tags:
      - api-controller
      operationId: getAerogenerators
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageAerogenerator'
components:
  schemas:
    Aerogenerator:
      type: object
      properties:
        eoloPark:
          $ref: '#/components/schemas/EoloPark'
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        bladeLength:
          type: number
          format: double
        height:
          type: number
          format: double
        power:
          type: number
          format: double
        id:
          type: string
        trueId:
          type: integer
          format: int64
    EoloPark:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        city:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        area:
          type: number
          format: double
        terrainType:
          type: string
          enum:
          - PLAIN
          - HILL
          - MOUNTAIN
          - DESERT
          - FOREST
        owner:
          type: integer
          format: int64
        aerogenerator:
          $ref: '#/components/schemas/Aerogenerator'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        encodedPassword:
          type: string
        roles:
          type: array
          items:
            type: string
        eoloParks:
          type: array
          items:
            $ref: '#/components/schemas/EoloPark'
        premium:
          type: boolean
    Substation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        model:
          type: string
        power:
          type: number
          format: double
        voltage:
          type: number
          format: double
        eoloPark:
          $ref: '#/components/schemas/EoloPark'
    AutomaticPark:
      type: object
      properties:
        city:
          type: string
        area:
          type: number
          format: double
        owner:
          type: integer
          format: int64
    PageUser:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PageSubstation:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Substation'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageEoloPark:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/EoloPark'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageAerogenerator:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Aerogenerator'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
